{"version":3,"sources":["MyContext.js","GrandchildComponent.js","ChildComponent.js","App.js","index.js"],"names":["MyContext","React","createContext","GrandchildComponent","props","Consumer","context","onClick","setCount","count","ChildComponent","useContext","prevCount","updateCount","App","useState","componentStateObj","num","Provider","value","className","ReactDOM","render","document","getElementById"],"mappings":"+PAiBeA,G,KATGC,IAAMC,cAAc,KCavBC,EAlBa,SAAAC,GAC3B,OAGC,kBAAC,EAAUC,SAAX,MACE,SAAAC,GAAO,OACP,6BACC,kDACA,4BAAQC,QAAS,kBAAMD,EAAQE,SAASF,EAAQG,MAAQ,KAAxD,aAEU,IAJX,qCAKoCH,EAAQG,MAL5C,SCgCWC,EApCQ,SAAAN,GAKtB,IAAME,EAAUK,qBAAWX,GAE3B,OACC,6BACC,8CACA,4BAAQO,QAAS,kBAAMD,EAAQE,UAAS,SAAAI,GAAS,OAAIA,EAAY,OAAjE,aAEU,IACV,4BAAQL,QAAS,kBAAMD,EAAQO,YAAY,KAA3C,aALD,iCAM2BP,EAAQG,MANnC,IAOC,6BACA,kBAAC,EAAD,QC4CYK,MA1Df,WAAe,MAMYC,mBAAS,GANrB,mBAMPN,EANO,KAMAD,EANA,KA6BRQ,EAAoB,CACzBP,MAAOA,EACPD,SAAUA,EACVK,YAtBmB,SAAAI,GACnBT,GAAS,SAAAI,GAAS,OAAIA,EAAYK,OAwBnC,OAEC,kBAAC,EAAUC,SAAX,CAAoBC,MAAOH,GAC1B,0BAAMI,UAAU,OACf,iDAEC,6BAFD,wCAKA,uDACA,4BACC,8DACA,uFACA,oFAGD,wDAA8BX,GAC9B,kBAAC,EAAD,S,MCtDJY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d4f6e91f.chunk.js","sourcesContent":["import React from 'react';\n\n// use context to create global variables and functions\n// that can be shared with all components\n\n// create a context object\n// will still work if this is empty\n// because replaced with values passed into Provider (see App.js)\nconst MyContext = React.createContext({});\n\n// don't have to do:\n// const MyContext = React.createContext({\n// \tcount: '',\n// \tsetCount: () => {},\n// \tupdateCounts: () => {}\n// });\n\nexport default MyContext;\n","import React from 'react';\nimport MyContext from './MyContext';\n\nconst GrandchildComponent = props => {\n\treturn (\n\t\t// if you don't want to use the useContext hook you can wrap the child component in MyContext.Consumer:\n\n\t\t<MyContext.Consumer>\n\t\t\t{context => (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>GrandhildComponent</h2>\n\t\t\t\t\t<button onClick={() => context.setCount(context.count + 5)}>\n\t\t\t\t\t\tCount + 5\n\t\t\t\t\t</button>{' '}\n\t\t\t\t\tSee Count in GrandchildComponent ({context.count})\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</MyContext.Consumer>\n\t);\n};\n\nexport default GrandchildComponent;\n","import React, { useContext } from 'react';\nimport MyContext from './MyContext';\n\nimport GrandchildComponent from './GrandchildComponent';\n\nconst ChildComponent = props => {\n\t// using the useContext hook & destructuring:\n\t// const {count, setCount, updateCount } = useContext(MyContext);\n\n\t// just using the useContext hook:\n\tconst context = useContext(MyContext);\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>ChildComponent</h2>\n\t\t\t<button onClick={() => context.setCount(prevCount => prevCount + 1)}>\n\t\t\t\tCount + 1\n\t\t\t</button>{' '}\n\t\t\t<button onClick={() => context.updateCount(2)}>Count + 2</button> See\n\t\t\tCount in ChildComponent ({context.count})\n\t\t\t<br />\n\t\t\t<GrandchildComponent />\n\t\t</div>\n\t);\n\n\t/// using the useContext hook withOUT destructuring\n\t// const myContextObj = useContext(MyContext);\n\n\t// return (\n\t// \t<div>\n\t// \t\t<h2>ChildComponent</h2>\n\t// \t\t<button onClick={() => myContextObj.setCount(myContextObj.count + 1)}>\n\t// \t\t\tCount + 1\n\t// \t\t</button>{' '}\n\t// \t\tSee Count in ChildComponent ({myContextObj.count})\n\t// \t\t<br />\n\t// \t\t<GrandchildComponent />\n\t// \t</div>\n\t// );\n};\n\nexport default ChildComponent;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport MyContext from './MyContext';\n\nimport ChildComponent from './ChildComponent';\n\nfunction App() {\n\t// in this example, App = my Provider - where I define state\n\t// Provider = holds and provides state\n\n\t// setting default state 'count' variable value, using hooks\n\t// setCount is the updater function to change the state 'count' variable value\n\tconst [count, setCount] = useState(0);\n\n\t// To use the previous value to update state, you must create a function that receives the previous value and returns the new value\n\t// NOTE: 'prevCount' can be any text string\n\tconst updateCount = num => {\n\t\tsetCount(prevCount => prevCount + num);\n\t};\n\n\t/*\n\tfrom https://reactjs.org/docs/context.html:\n\n\t\tContext.Provider\n\n\t\t Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes\n\n\t\t Accepts a value prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.\n\n\t\t All consumers that are descendants of a Provider will re-render whenever the Providerâ€™s value prop changes. The propagation from Provider to its descendant consumers is not subject to the shouldComponentUpdate method, so the consumer is updated even when an ancestor component bails out of the update.\n\t\t*/\n\n\t// create a component state object to update the values stored in MyContext\n\t// pass in any variables and functions you want access to in child components (aka Consumers)\n\t// pass in both the state variables AND the functions which change them\n\tconst componentStateObj = {\n\t\tcount: count,\n\t\tsetCount: setCount,\n\t\tupdateCount: updateCount\n\t};\n\n\treturn (\n\t\t// use Provider to pass this component state as a context value down to the entire component tree\n\t\t<MyContext.Provider value={componentStateObj}>\n\t\t\t<main className=\"App\">\n\t\t\t\t<h1>\n\t\t\t\t\tReact Context Demo\n\t\t\t\t\t<br />\n\t\t\t\t\twith Functional Components and Hooks\n\t\t\t\t</h1>\n\t\t\t\t<p>To use context you need:</p>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>a state object (in a provider)</li>\n\t\t\t\t\t<li>a way to change your state object from your consumer(s)</li>\n\t\t\t\t\t<li>a way to communicate state changes to your provider</li>\n\t\t\t\t</ul>\n\n\t\t\t\t<div>The count (in state) is {count}</div>\n\t\t\t\t<ChildComponent />\n\t\t\t</main>\n\t\t</MyContext.Provider>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}